use futures::Future;
use futures::FutureExt;
use std::pin::Pin;
use std::task::Context;
use std::task::Poll;

///
/// Derived from sample put together by Josh

pub type ReqwestSendResult = std::result::Result<reqwest::Response, reqwest::Error>;

pub struct ExchHttpResult {
    pub request: u64,
    pub response_result: ReqwestSendResult,
}

pub struct ExchHttpFuture {
    request: u64,
    sender: Pin<Box<dyn futures::Future<Output = ReqwestSendResult> + Send>>,
}

impl ExchHttpFuture {
    /// ## Arguments
    /// * `request` - Request state
    /// * `sender` - Pinned future generated by `reqwest::RequestBuilder::send()`.
    pub fn new(
        request: u64,
        sender: Pin<Box<dyn futures::Future<Output = ReqwestSendResult> + Send>>,
    ) -> Self {
        Self { request, sender }
    }
}

impl Future for ExchHttpFuture {
    type Output = ExchHttpResult;

    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
        match self.sender.poll_unpin(cx) {
            Poll::Pending => Poll::Pending,
            Poll::Ready(result) => Poll::Ready(ExchHttpResult {
                request: self.request,
                response_result: result,
            }),
        }
    }
}

#[tonic::async_trait]
pub trait ExchHttpDeserialise {
    async fn deserialise<T>(self) -> anyhow::Result<T>
    where
        T: serde::de::DeserializeOwned;
}

#[tonic::async_trait]
impl ExchHttpDeserialise for ReqwestSendResult {
    /// Attempts to retrieve response text from `reqwest::Result` and decode into supplied type.
    ///
    /// Note: Performs logging on any error cases.
    async fn deserialise<T>(self) -> anyhow::Result<T>
    where
        T: serde::de::DeserializeOwned,
    {
        // TODO: check res status and err 'code'

        match self {
            Ok(response) => match response.text().await {
                Ok(text) => match serde_json::from_str::<T>(text.as_str()) {
                    Ok(json) => Ok(json),
                    Err(err) => {
                        // failed to decode json string into supplied type
                        anyhow::bail!("HTTP Error: {}", err);
                    }
                },
                Err(err) => {
                    // failed to decode byte stream into string
                    anyhow::bail!("HTTP Error: {}", err);
                }
            },
            Err(err) => {
                // http request unsuccessful
                anyhow::bail!("HTTP Error: {}", err);
            }
        }
    }
}
